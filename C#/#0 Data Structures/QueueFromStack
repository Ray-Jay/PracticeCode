using System;
using System.Collections.Generic;

// a Queue data structure, implemented with stacks
public class Queue<T>
{
    // fields
    Stack<T> s1;
    Stack<T> s2;

    // properties
    public int Count { get { return s1.Count; } }

    // constructors
    public Queue()
    {
        s1 = new Stack<T>();
        s2 = new Stack<T>();
    }

    // methods
    public void Enqueue(T item)
    {
        s1.Push(item);
    }

    public T Dequeue()
    {
        if (s1.Count == 0) { throw new InvalidOperationException("Invalid Operation. Queue is empty."); }

        if (s1.Count == 1) { return s1.Pop(); }

        // move all but bottom item to s2
        int s1Count = s1.Count;  // lessons learned: the count will change with each iteration. Make sure to save as a variable
        for (int i = 0; i < s1Count - 1; i++)
        {
            s2.Push(s1.Pop());
        }

        T item = s1.Pop();

        // move everything back to s1
        while (s2.Count > 0)
        {
            s1.Push(s2.Pop());
        }

        return item;
    }
}
